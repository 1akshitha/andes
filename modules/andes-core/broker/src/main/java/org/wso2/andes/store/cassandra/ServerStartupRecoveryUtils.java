/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.wso2.andes.store.cassandra;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.wso2.andes.configuration.AndesConfigurationManager;
import org.wso2.andes.configuration.enums.AndesConfiguration;
import org.wso2.andes.kernel.AndesException;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Slot mapping recovery has to deal with cassandra tombstone when server startup. This class has utility method used to
 * recovery process.
 *
 */
public class ServerStartupRecoveryUtils {

    private static Logger log = LoggerFactory.getLogger(ServerStartupRecoveryUtils.class);

    /**
     * Return slot recovery completion message id to stop seeking through cassandra database
     *
     * @return id of the message used to stop slot recovery task
     */
    public static long getMessageIdToCompleteRecovery() {
        long REFERENCE_START = 41L * 365L * 24L * 60L * 60L * 1000L;
        long ts = System.currentTimeMillis();
        return (ts - REFERENCE_START) * 256 * 1024;
    }

    /**
     * Difference between star message id and end message id in slot remapping process at server startup.
     * Value return here must avoid TombstoneOverwhelmingException
     *
     * @return difference between start message id and end message id
     */
    public static long getMessageDifferenceForWarmStartup() {
        Long chunkSize = AndesConfigurationManager.readValue
                (AndesConfiguration.RECOVERY_MESSAGES_RECOVERY_WINDOW_SIZE);
        long timeDifference = 256 * 1024;
        return timeDifference * chunkSize;
    }

    /**
     * Generate start message id for slot remapping at server warm startup. This is generated by configured date in
     * broker.xml.
     *
     * @return first message id
     * @throws AndesException
     */
    public static long getStartMessageIdForWarmStartup() throws AndesException {
        long firstMsgId;
        try {
            String recoveryStartFrom = AndesConfigurationManager.readValue
                    (AndesConfiguration.RECOVERY_MESSAGES_START_FROM_DATE);
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date recoveryDate = dateFormat.parse(recoveryStartFrom);
            firstMsgId = recoveryDate.getTime();
        } catch (ParseException e) {
            throw new AndesException("Error while parsing <startRecoveryFrom> property. " +
                    "Please verify date format.");
        }
        return firstMsgId;
    }
}
